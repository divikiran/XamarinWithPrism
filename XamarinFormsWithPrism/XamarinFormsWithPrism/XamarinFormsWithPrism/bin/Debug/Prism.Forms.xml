<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Prism.Forms</name>
    </assembly>
    <members>
        <member name="T:Prism.Bootstrapper">
            <summary>
            Base class that provides a basic bootstrapping sequence and hooks that specific implementations can override
            </summary>
            <remarks>
            This class must be overridden to provide application specific configuration.
            </remarks>
        </member>
        <member name="P:Prism.Bootstrapper.App">
            <summary>
            The current <see cref="T:Xamarin.Forms.Application"/>
            </summary>
        </member>
        <member name="P:Prism.Bootstrapper.Logger">
            <summary>
            Gets the <see cref="T:Prism.Logging.ILoggerFacade"/> for the application.
            </summary>
            <value>A <see cref="T:Prism.Logging.ILoggerFacade"/> instance.</value>
        </member>
        <member name="M:Prism.Bootstrapper.Run(Xamarin.Forms.Application)">
            <summary>
            Runs the bootstrapper process.
            </summary>
            <param name="app">The current <see cref="T:Xamarin.Forms.Application"/></param>
        </member>
        <member name="M:Prism.Bootstrapper.Run">
            <summary>
            Run the bootstrapper process.
            </summary>
        </member>
        <member name="M:Prism.Bootstrapper.CreateLogger">
            <summary>
            Create the <see cref="T:Prism.Logging.ILoggerFacade" /> used by the bootstrapper.
            </summary>
            <remarks>
            The base implementation returns a new TextLogger.
            </remarks>
        </member>
        <member name="M:Prism.Bootstrapper.CreateMainPage">
            <summary>
            Creates the root <see cref="T:Xamarin.Forms.Page"/> for the application.
            </summary>
            <returns>The <see cref="T:Xamarin.Forms.Page"/></returns>
        </member>
        <member name="M:Prism.Bootstrapper.ConfigureViewModelLocator">
            <summary>
            Configures the <see cref="T:Prism.Mvvm.ViewModelLocator"/> used by Prism.
            </summary>
        </member>
        <member name="M:Prism.Bootstrapper.ConfigureServiceLocator">
            <summary>
            Configures the LocatorProvider for the <see cref="T:Microsoft.Practices.ServiceLocation.ServiceLocator" />.
            </summary>
        </member>
        <member name="M:Prism.Bootstrapper.RegisterTypes">
            <summary>
            Used to register types with the container that will be used by your application.
            </summary>
        </member>
        <member name="T:Prism.Mvvm.ViewModelLocator">
            <summary>
            This class defines the attached property and related change handler that calls the <see cref="T:Prism.Mvvm.ViewModelLocationProvider"/>.
            </summary>
        </member>
        <member name="F:Prism.Mvvm.ViewModelLocator.AutowireViewModelProperty">
            <summary>
            Instructs Prism whether or not to automatically create an instance of a ViewModel using a convention, and assign the associated View's <see cref="P:Xamarin.Forms.BindableObject.BindingContext"/> to that instance.
            </summary>
        </member>
        <member name="M:Prism.Mvvm.ViewModelLocator.GetAutowireViewModel(Xamarin.Forms.BindableObject)">
            <summary>
            Gets the AutowireViewModel property value.
            </summary>
            <param name="bindable"></param>
            <returns></returns>
        </member>
        <member name="M:Prism.Mvvm.ViewModelLocator.SetAutowireViewModel(Xamarin.Forms.BindableObject,System.Boolean)">
            <summary>
            Sets the AutowireViewModel property value.  If <c>true</c>, creates an instance of a ViewModel using a convention, and sets the associated View's <see cref="P:Xamarin.Forms.BindableObject.BindingContext"/> to that instance.
            </summary>
            <param name="bindable"></param>
            <param name="value"></param>
        </member>
        <member name="M:Prism.Mvvm.ViewModelLocator.Bind(System.Object,System.Object)">
            <summary>
            Sets the <see cref="P:Xamarin.Forms.BindableObject.BindingContext"/> of a View
            </summary>
            <param name="view">The View to set the <see cref="P:Xamarin.Forms.BindableObject.BindingContext"/> on</param>
            <param name="viewModel">The object to use as the <see cref="P:Xamarin.Forms.BindableObject.BindingContext"/> for the View</param>
        </member>
        <member name="T:Prism.Navigation.IConfirmNavigation">
            <summary>
            Provides a way for ViewModels involved in navigation to determine if a navigation request should continue.
            </summary>
        </member>
        <member name="M:Prism.Navigation.IConfirmNavigation.CanNavigate(Prism.Navigation.NavigationParameters)">
            <summary>
            Determines whether this instance accepts being navigated away from.
            </summary>
            <param name="parameters">The navigation parameters.</param>
            <returns><c>True</c> if navigation can continue, <c>False</c> if navigation is not allowed to continue</returns>
        </member>
        <member name="T:Prism.Navigation.INavigationAware">
            <summary>
            Provides a way for ViewModels involved in navigation to be notified of navigation activities.
            </summary>
        </member>
        <member name="M:Prism.Navigation.INavigationAware.OnNavigatedFrom(Prism.Navigation.NavigationParameters)">
            <summary>
            Called when the implementer is being navigated away from.
            </summary>
            <param name="parameters">The navigation parameters.</param>
        </member>
        <member name="M:Prism.Navigation.INavigationAware.OnNavigatedTo(Prism.Navigation.NavigationParameters)">
            <summary>
            Called when the implementer has been navigated to.
            </summary>
            <param name="parameters">The navigation parameters.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Prism.Navigation.INavigationPageProvider" -->
        <member name="M:Prism.Navigation.INavigationPageProvider.CreatePageForNavigation(Xamarin.Forms.Page,Xamarin.Forms.Page)">
            <summary>
            Use this method to wrap, or replace, the current target <see cref="T:Xamarin.Forms.Page"/> with a new page, such as a <see cref="T:Xamarin.Forms.NavigationPage"/>. The source page is also provided
            to enable you to make decisions based on the source of the navigation.
            </summary>
            <param name="sourcePage">The <see cref="T:Xamarin.Forms.Page"/> that is the source of the navigation. This is the page being navigated away from.</param>
            <param name="targetPage">The <see cref="T:Xamarin.Forms.Page"/> that is the target for navigation. This is the Page being navigated to.</param>
            <returns>A new page</returns>
            <remarks>Returning null will have no affect on navigation. The targetPage will remain the navigation target.</remarks>
            <example>
            public Page CreatePageForNavigation(Page sourcePage, Page targetPage)
            {
                NavigationPage.SetHasNavigationBar(targetPage, true);
                NavigationPage.SetBackButtonTitle(targetPage, "Go Back Sucka");
                NavigationPage.SetHasBackButton(targetPage, true);
            
                var newPage = new NavigationPage(targetPage);
                newPage.BarBackgroundColor = Color.Green;
                newPage.BarTextColor = Color.White;
                return newPage;
            }
            </example>
        </member>
        <member name="T:Prism.Navigation.INavigationService">
            <summary>
            Provides page based navigation for ViewModels.
            </summary>
        </member>
        <member name="M:Prism.Navigation.INavigationService.GoBack(System.Boolean,System.Boolean)">
            <summary>
            Navigates to the most recent entry in the back navigation history by popping the calling Page off the navigation stack.
            </summary>
            <param name="useModalNavigation">If <c>true</c> uses PopModalAsync, if <c>false</c> uses PopAsync</param>
            <param name="animated">If <c>true</c> the transition is animated, if <c>false</c> there is no animation on transition.</param>
        </member>
        <member name="M:Prism.Navigation.INavigationService.Navigate``1(Prism.Navigation.NavigationParameters,System.Boolean,System.Boolean)">
            <summary>
            Initiates navigation to the target specified by the <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type which will be used to identify the name of the navigation target.</typeparam>
            <param name="parameters">The navigation parameters</param>
            <param name="useModalNavigation">If <c>true</c> uses PopModalAsync, if <c>false</c> uses PopAsync</param>
            <param name="animated">If <c>true</c> the transition is animated, if <c>false</c> there is no animation on transition.</param>
        </member>
        <member name="M:Prism.Navigation.INavigationService.Navigate(System.String,Prism.Navigation.NavigationParameters,System.Boolean,System.Boolean)">
            <summary>
            Initiates navigation to the target specified by the <paramref name="name"/>.
            </summary>
            <param name="name">The name of the target to navigate to.</param>
            <param name="parameters">The navigation parameters</param>
            <param name="useModalNavigation">If <c>true</c> uses PopModalAsync, if <c>false</c> uses PopAsync</param>
            <param name="animated">If <c>true</c> the transition is animated, if <c>false</c> there is no animation on transition.</param>
        </member>
        <member name="T:Prism.Navigation.NavigationPageProviderAttribute">
            <summary>
            Specifies the <see cref="T:Prism.Navigation.INavigationPageProvider"/> to use while navigating to the decorated <see cref="T:Xamarin.Forms.Page"/>.
            </summary>
        </member>
        <member name="P:Prism.Navigation.NavigationPageProviderAttribute.Type">
            <summary>
            The type that implements the <see cref="T:Prism.Navigation.INavigationPageProvider"/> interface
            </summary>
        </member>
        <member name="M:Prism.Navigation.NavigationPageProviderAttribute.#ctor(System.Type)">
            <summary>
            Create a new instance of the <see cref="T:Prism.Navigation.NavigationPageProviderAttribute"/>
            </summary>
            <param name="pageProviderType">The type of the <see cref="T:Prism.Navigation.INavigationPageProvider"/> to use.</param>
        </member>
        <member name="T:Prism.Navigation.NavigationParameters">
            <summary>
            Represents Navigation parameters.
            </summary>
            <remarks>
            This class can be used to to pass object parameters during Navigation. 
            </remarks>
        </member>
        <member name="M:Prism.Navigation.NavigationParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Navigation.NavigationParameters"/> class.
            </summary>
        </member>
        <member name="M:Prism.Navigation.NavigationParameters.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Navigation.NavigationParameters"/> class with a query string.
            </summary>
            <param name="query">The query string.</param>
        </member>
        <member name="M:Prism.Navigation.NavigationParameters.ToString">
            <summary>
            Converts the list of key value pairs to a query string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Prism.Navigation.PageNavigationService">
            <summary>
            Provides page based navigation for ViewModels.
            </summary>
        </member>
        <member name="M:Prism.Navigation.PageNavigationService.GoBack(System.Boolean,System.Boolean)">
            <summary>
            Navigates to the most recent entry in the back navigation history by popping the calling Page off the navigation stack.
            </summary>
            <param name="useModalNavigation">If <c>true</c> uses PopModalAsync, if <c>false</c> uses PopAsync</param>
            <param name="animated">If <c>true</c> the transition is animated, if <c>false</c> there is no animation on transition.</param>
        </member>
        <member name="M:Prism.Navigation.PageNavigationService.Navigate``1(Prism.Navigation.NavigationParameters,System.Boolean,System.Boolean)">
            <summary>
            Initiates navigation to the target specified by the <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type which will be used to identify the name of the navigation target.</typeparam>
            <param name="parameters">The navigation parameters</param>
            <param name="useModalNavigation">If <c>true</c> uses PopModalAsync, if <c>false</c> uses PopAsync</param>
            <param name="animated">If <c>true</c> the transition is animated, if <c>false</c> there is no animation on transition.</param>
        </member>
        <member name="M:Prism.Navigation.PageNavigationService.Navigate(System.String,Prism.Navigation.NavigationParameters,System.Boolean,System.Boolean)">
            <summary>
            Initiates navigation to the target specified by the <paramref name="name"/>.
            </summary>
            <param name="name">The name of the target to navigate to.</param>
            <param name="parameters">The navigation parameters</param>
            <param name="useModalNavigation">If <c>true</c> uses PopModalAsync, if <c>false</c> uses PopAsync</param>
            <param name="animated">If <c>true</c> the transition is animated, if <c>false</c> there is no animation on transition.</param>
        </member>
        <member name="T:Prism.Common.IPageAware">
            <summary>
            Interface to signify that a class must have knowledge of a specific <see cref="T:Xamarin.Forms.Page"/> instance in order to function properly.
            </summary>
        </member>
        <member name="P:Prism.Common.IPageAware.Page">
            <summary>
            The <see cref="T:Xamarin.Forms.Page"/> instance.
            </summary>
        </member>
        <member name="T:Prism.Services.ActionSheetButton">
            <summary>
            Represents a button displayed in <see cref="M:Prism.Services.IPageDialogService.DisplayActionSheet(System.String,Prism.Services.IActionSheetButton[])"/>
            </summary>
        </member>
        <member name="P:Prism.Services.ActionSheetButton.IsDestroy">
            <summary>
            The button will be used as destroy
            </summary>
        </member>
        <member name="P:Prism.Services.ActionSheetButton.IsCancel">
            <summary>
            The button will be used as cancel
            </summary>
        </member>
        <member name="P:Prism.Services.ActionSheetButton.Text">
            <summary>
            Text to display in the action sheet
            </summary>
        </member>
        <member name="P:Prism.Services.ActionSheetButton.Command">
            <summary>
            Command to execute when button is pressed
            </summary>
        </member>
        <member name="M:Prism.Services.ActionSheetButton.CreateCancelButton(System.String,System.Windows.Input.ICommand)">
            <summary>
            Create a new instance of <see cref="T:Prism.Services.ActionSheetButton"/> that display as "cancel button"
            </summary>
            <param name="text">Button text</param>
            <param name="command">Command to execute when button pressed</param>
            <returns>An instance of <see cref="T:Prism.Services.ActionSheetButton"/></returns>
        </member>
        <member name="M:Prism.Services.ActionSheetButton.CreateDestroyButton(System.String,System.Windows.Input.ICommand)">
            <summary>
            Create a new instance of <see cref="T:Prism.Services.ActionSheetButton"/> that display as "destroy button"
            </summary>
            <param name="text">Button text</param>
            <param name="command">Command to execute when button pressed</param>
            <returns>An instance of <see cref="T:Prism.Services.ActionSheetButton"/></returns>
        </member>
        <member name="M:Prism.Services.ActionSheetButton.CreateButton(System.String,System.Windows.Input.ICommand)">
            <summary>
            Create a new instance of <see cref="T:Prism.Services.ActionSheetButton"/> that display as "other button"
            </summary>
            <param name="text">Button text</param>
            <param name="command">Command to execute when button pressed</param>
            <returns>An instance of <see cref="T:Prism.Services.ActionSheetButton"/></returns>
        </member>
        <member name="T:Prism.Services.DependencyService">
            <summary>
            A service that provides acess to platform-specific implementations of a specified type
            </summary>
        </member>
        <member name="M:Prism.Services.DependencyService.Get``1">
            <summary>
            Returns a platform-specific implementation of a type registered with the Xamarin.Forms.DependencyService
            </summary>
            <typeparam name="T">The type of class to get</typeparam>
            <returns>The class instance</returns>
        </member>
        <member name="T:Prism.Services.IActionSheetButton">
            <summary>
            Convenient contract to enable executing commands directly when using <see cref="M:Prism.Services.IPageDialogService.DisplayActionSheet(System.String,Prism.Services.IActionSheetButton[])"/>
            </summary>
        </member>
        <member name="P:Prism.Services.IActionSheetButton.IsDestroy">
            <summary>
            The button will be used as destroy
            </summary>
        </member>
        <member name="P:Prism.Services.IActionSheetButton.IsCancel">
            <summary>
            The button will be used as cancel
            </summary>
        </member>
        <member name="P:Prism.Services.IActionSheetButton.Text">
            <summary>
            Text to display in the action sheet
            </summary>
        </member>
        <member name="P:Prism.Services.IActionSheetButton.Command">
            <summary>
            Command to execute when button is pressed
            </summary>
        </member>
        <member name="T:Prism.Services.IDependencyService">
            <summary>
            A service that provides acess to platform-specific implementations of a specified type
            </summary>
        </member>
        <member name="M:Prism.Services.IDependencyService.Get``1">
            <summary>
            Returns a platform-specific implementation of a type registered with the Xamarin.Forms.DependencyService
            </summary>
            <typeparam name="T">The type of class to get</typeparam>
            <returns>The class instance</returns>
        </member>
        <member name="T:Prism.Services.IPageDialogService">
            <summary>
            A service which provides access to the DisplayAlert and DisplayActionSheet off of the Xamarin.Forms.Page class.
            </summary>
        </member>
        <member name="M:Prism.Services.IPageDialogService.DisplayAlert(System.String,System.String,System.String,System.String)">
            <summary>
            Presents an alert dialog to the application user with an accept and a cancel button.
            </summary>
            <para>
            The <paramref name="message"/> can be empty.
            </para>
            <param name="title">Title to display.</param>
            <param name="message">Message to display.</param>
            <param name="acceptButton">Text for the accept button.</param>
            <param name="cancelButton">Text for the cancel button.</param>
            <returns><c>true</c> if non-destructive button pressed; otherwise <c>false</c>/></returns>
        </member>
        <member name="M:Prism.Services.IPageDialogService.DisplayAlert(System.String,System.String,System.String)">
            <summary>
            Presents an alert dialog to the application user with a single cancel button.
            </summary>
            <para>
            The <paramref name="message"/> can be empty.
            </para>
            <param name="title">Title to display.</param>
            <param name="message">Message to display.</param>
            <param name="cancelButton">Text for the cancel button.</param>
            <returns></returns>
        </member>
        <member name="M:Prism.Services.IPageDialogService.DisplayActionSheet(System.String,System.String,System.String,System.String[])">
            <summary>
            Displays a native platform action sheet, allowing the application user to choose from serveral buttons.
            </summary>
            <param name="title">Title to display in view.</param>
            <param name="cancelButton">Text for the cancel button.</param>
            <param name="destroyButton">Text for the ok button.</param>
            <param name="otherButtons">Text for other buttons.</param>
            <returns>Text for the pressed button</returns>
        </member>
        <member name="M:Prism.Services.IPageDialogService.DisplayActionSheet(System.String,Prism.Services.IActionSheetButton[])">
            <summary>
            Displays a native platform action sheet, allowing the application user to choose from serveral buttons.
            </summary>
            <para>
            The text displayed in the action sheet will be the value for <see cref="P:Prism.Services.IActionSheetButton.Text"/> and when pressed
            the <see cref="P:Prism.Services.IActionSheetButton.Command"/> will be executed.
            </para>
            <param name="title">Text to display in action sheet</param>
            <param name="buttons">Buttons displayed in action sheet</param>
            <returns></returns>
        </member>
        <member name="T:Prism.Services.PageDialogService">
            <summary>
            
            </summary>
        </member>
        <member name="M:Prism.Services.PageDialogService.DisplayAlert(System.String,System.String,System.String,System.String)">
            <summary>
            Presents an alert dialog to the application user with an accept and a cancel button.
            </summary>
            <para>
            The <paramref name="message"/> can be empty.
            </para>
            <param name="title">Title to display.</param>
            <param name="message">Message to display.</param>
            <param name="acceptButton">Text for the accept button.</param>
            <param name="cancelButton">Text for the cancel button.</param>
            <returns><c>true</c> if non-destructive button pressed; otherwise <c>false</c>/></returns>
        </member>
        <member name="M:Prism.Services.PageDialogService.DisplayAlert(System.String,System.String,System.String)">
            <summary>
            Presents an alert dialog to the application user with a single cancel button.
            </summary>
            <para>
            The <paramref name="message"/> can be empty.
            </para>
            <param name="title">Title to display.</param>
            <param name="message">Message to display.</param>
            <param name="cancelButton">Text for the cancel button.</param>
            <returns></returns>
        </member>
        <member name="M:Prism.Services.PageDialogService.DisplayActionSheet(System.String,System.String,System.String,System.String[])">
            <summary>
            Displays a native platform action sheet, allowing the application user to choose from serveral buttons.
            </summary>
            <param name="title">Title to display in view.</param>
            <param name="cancelButton">Text for the cancel button.</param>
            <param name="destroyButton">Text for the ok button.</param>
            <param name="otherButtons">Text for other buttons.</param>
            <returns>Text for the pressed button</returns>
        </member>
        <member name="M:Prism.Services.PageDialogService.DisplayActionSheet(System.String,Prism.Services.IActionSheetButton[])">
            <summary>
            Displays a native platform action sheet, allowing the application user to choose from serveral buttons.
            </summary>
            <para>
            The text displayed in the action sheet will be the value for <see cref="P:Prism.Services.IActionSheetButton.Text"/> and when pressed
            the <see cref="P:Prism.Services.IActionSheetButton.Command"/> will be executed.
            </para>
            <param name="title">Text to display in action sheet</param>
            <param name="buttons">Buttons displayed in action sheet</param>
            <returns></returns>
        </member>
    </members>
</doc>
